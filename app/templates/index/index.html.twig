{% extends 'base.html.twig' %}

{% block title %}{{'Welcome'|trans}}!{% endblock %}

{% block body %}

<style>
  @charset "UTF-8";

  :root {
    --background: linear-gradient(30deg, #4db1c7 30%, #67d57a);
    --background-select: linear-gradient(to left, #34495e 3rem, #2c3e50 3rem);
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  body {
    font-family: "Anta", sans-serif;
    font-weight: 400;
    font-style: normal;
    display: grid;
    place-content: center;
    min-height: 100vh;
    background: var(--background);
    color: white;
  }


  .container {
    background-color: #fff;
    padding: 40px;
    color: #1262f3;
    border-radius: 10px;
    box-shadow: 0 11px 36px rgba(0, 0, 0, 1);
    text-align: center;
  }

  /* Reset <select> defaults */
  select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    border: 0;
    outline: 0;
    background: none;
    color: inherit;
    box-shadow: none;
  }

  select::-ms-expand {
    display: none;
  }

  /* Custom Select wrapper */
  .select {
    position: relative;
    display: flex;
    color: white;
    width: 100%;
    background: var(--background-select);
    border-radius: 0.25rem;
    overflow: hidden;
  }

  .select select {
    flex: 1;
    padding: 1em;
    cursor: pointer;
  }

  select option {
    color: black;
  }

  .select::after {
    content: "▼";
    position: absolute;
    right: 1rem;
    top: 0.8rem;
    transition: 0.25s all ease;
    pointer-events: none;
  }

  .select:hover::after {
    color: #1262f3;
    -webkit-animation: bounce 0.5s infinite;
    animation: bounce 0.5s infinite;
  }

  #countdown {
        font-size: 24px;
    }

  @-webkit-keyframes bounce {
    25% {
      transform: translatey(5px);
    }

    75% {
      transform: translatey(-5px);
    }
  }

  @keyframes bounce {
    25% {
      transform: translatey(5px);
    }

    75% {
      transform: translatey(-5px);
    }
  }
</style>

<div class="container">
  <label class="select">
    <select id="languageSelect">
      <option value="es" {% if app.request.getLocale()=='es' %}selected{%endif%}>ES</option>
      <option value="en" {% if app.request.getLocale()=='en' %}selected{%endif%}>EN</option>
    </select>
  </label>

  <div class="card">
    <h1>{{'Coming Soon'|trans}}</h1>
    <h2>{{'A new developer that you will be proud of'|trans}}</h2>
    <div>
      <p>{{'This page will self destruct in'|trans}}...</p>
      <div id="countdown">00:00:00</div>
    </div>
  </div>
</div>
{% endblock %}

{%block javascripts %}
<script>
  document.getElementById("languageSelect").addEventListener("change", function () {
    let selectedValue = this.value;
    window.location.href = '/' + this.value;
  });


  const endDate = new Date('2024-03-01T00:00:00').getTime(); //viene de back

  // Actualizar el temporizador cada segundo
  const timerInterval = setInterval(() => {
    // Obtener la fecha y hora actual
    const now = new Date().getTime();

    // Calcular la diferencia entre la fecha final y la fecha actual
    const difference = endDate - now;

    // Calcular las horas, minutos y segundos restantes
    const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((difference % (1000 * 60)) / 1000);

    // Mostrar el temporizador en el formato HH:MM:SS
    document.getElementById('countdown').innerHTML = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

    // Si la cuenta regresiva termina, detener el temporizador
    if (difference < 0) {
      clearInterval(timerInterval);
      document.getElementById('countdown').innerHTML = '00:00:00';
      alert('¡Tiempo terminado!');
    }
  }, 1000); // 1000 milisegundos = 1 segundo


</script>

{%endblock%}